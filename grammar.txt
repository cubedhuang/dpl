expr       : KEYWORD:set IDENTIFIER ASSIGN expr
           : comp-expr (comp-op comp-expr)*

comp-expr  : KEYWORD:not comp-expr
           : arith-expr ((EQ|NEQ|LT|LE|GT|GE) arith-expr)*

arith-expr : term ((PLUS|MINUS) term)*

term       : factor ((MUL|DIV|MOD) factor)*
           : STRING

factor     : (PLUS|MINUS)? power

power      : fn-call (POW factor)*

fn-call       : atom (LPAREN (expr (COMMA expr)*)? RPAREN)?

atom       : NONE|NUMBER|BOOL|STRING|IDENTIFIER
           : LPAREN expr RPAREN
           : if-expr
           : for-expr
           : while-expr
           : fn-def

if-expr    : KEYWORD:if expr KEYWORD:do expr
             (KEYWORD:else expr)?

for-expr   : KEYWORD:for IDENTIFIER ASSIGN expr KEYWORD:to expr
             (KEYWORD:step expr)? KEYWORD:do expr

while-expr : KEYWORD:while expr KEYWORD:do expr

fn-def     : KEYWORD:fn IDENTIFIER?
             LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
             KEYWORD:do expr
